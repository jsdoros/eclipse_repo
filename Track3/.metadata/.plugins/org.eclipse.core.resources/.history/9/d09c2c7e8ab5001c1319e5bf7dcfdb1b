package org.ssglobal.training.codes.time;

import java.time.LocalDate;
import java.time.Month;
import java.time.temporal.ChronoUnit;

public class TestLocalDate {

	public static void main(String[] args) {
		LocalDate now = LocalDate.now();
		System.out.println(now);
		
		LocalDate electionDay = LocalDate.of(2022, 5, 9);
		System.out.println(electionDay);
		
		LocalDate xmas = LocalDate.of(2022, Month.DECEMBER, 25);
		System.out.println(xmas);
		
		String bday = "2022-06-10";
		LocalDate bdayLocal = LocalDate.parse(bday);
		System.out.println(bdayLocal);
		
		// Utilities
		System.out.println(electionDay.compareTo(bdayLocal) == 0);
		System.out.println(electionDay.equals(bdayLocal));
		System.out.println(electionDay.isAfter(bdayLocal));
		System.out.println(electionDay.isBefore(bdayLocal));
		System.out.println(electionDay.isEqual(bdayLocal));
		
		System.out.println(now.getMonthValue());
		System.out.println(now.getMonth().toString());
		
		System.out.println(now.getDayOfWeek());
		System.out.println(now.getDayOfMonth());
		
		System.out.println(now.isLeapYear());
		
		System.out.println(now.isSupported(ChronoUnit.SECONDS)); // can be used in if statements to validated if supported
		System.out.println(electionDay.until(xmas, ChronoUnit.MONTHS)); // pass to future
		System.out.println(electionDay.until(xmas, ChronoUnit.DAYS));
		System.out.println(electionDay.until(xmas, ChronoUnit.WEEKS));
		
		System.out.println(now.plusMonths(3))
		;
		
	}
}
